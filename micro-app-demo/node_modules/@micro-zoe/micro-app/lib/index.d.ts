/// <reference path="../typings/global.d.ts" />
// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../@micro-app/types

declare module '@micro-zoe/micro-app' {
    export { default } from '@micro-zoe/micro-app/micro_app';
    export { default as preFetch, } from '@micro-zoe/micro-app/prefetch';
    export { removeDomScope, pureCreateElement, version, } from '@micro-zoe/micro-app/libs/utils';
    export { EventCenterForMicroApp, } from '@micro-zoe/micro-app/interact';
    export { getActiveApps, getAllApps, unmountApp, unmountAllApps, } from '@micro-zoe/micro-app/create_app';
}

declare module '@micro-zoe/micro-app/micro_app' {
    import type { OptionsType, MicroAppConfigType, lifeCyclesType, plugins, fetchType } from '@micro-app/types';
    import preFetch from '@micro-zoe/micro-app/prefetch';
    import { EventCenterForBaseApp } from '@micro-zoe/micro-app/interact';
    class MicroApp extends EventCenterForBaseApp implements MicroAppConfigType {
        tagName: string;
        shadowDOM?: boolean;
        destroy?: boolean;
        inline?: boolean;
        disableScopecss?: boolean;
        disableSandbox?: boolean;
        macro?: boolean;
        ssr?: boolean;
        lifeCycles?: lifeCyclesType;
        plugins?: plugins;
        fetch?: fetchType;
        preFetch: typeof preFetch;
        start(options?: OptionsType): void;
    }
    const _default: MicroApp;
    export default _default;
}

declare module '@micro-zoe/micro-app/prefetch' {
    import type { prefetchParamList, globalAssetsType } from '@micro-app/types';
    /**
        * preFetch([
        *  {
        *    name: string,
        *    url: string,
        *    disableScopecss?: boolean,
        *    disableSandbox?: boolean,
        *    macro?: boolean,
        *  },
        *  ...
        * ])
        * Note:
        *  1: preFetch is asynchronous and is performed only when the browser is idle
        *  2: disableScopecss, disableSandbox, macro must be same with micro-app element, if conflict, the one who executes first shall prevail
        * @param apps micro apps
        */
    export default function preFetch(apps: prefetchParamList): void;
    /**
        * load global assets into cache
        * @param assets global assets of js, css
        */
    export function getGlobalAssets(assets: globalAssetsType): void;
}

declare module '@micro-zoe/micro-app/libs/utils' {
    import type { Func } from '@micro-app/types';
    export const version = "__VERSION__";
    export const isBrowser: boolean;
    export const globalThis: any;
    export function isUndefined(target: unknown): target is undefined;
    export function isNull(target: unknown): target is null;
    export function isString(target: unknown): target is string;
    export function isBoolean(target: unknown): target is boolean;
    export function isFunction(target: unknown): boolean;
    export const isArray: (arg: any) => arg is any[];
    export function isPlainObject(target: unknown): boolean;
    export function isPromise(target: unknown): boolean;
    export function isBoundFunction(target: any): boolean;
    export function isShadowRoot(target: unknown): boolean;
    /**
        * format error log
        * @param msg message
        * @param appName app name, default is null
        */
    export function logError(msg: unknown, appName?: string | null, ...rest: any[]): void;
    /**
        * format warn log
        * @param msg message
        * @param appName app name, default is null
        */
    export function logWarn(msg: unknown, appName?: string | null, ...rest: any[]): void;
    /**
        * async execution
        * @param fn callback
        * @param args params
        */
    export function defer(fn: Func, ...args: any[]): void;
    /**
        * Add address protocol
        * @param url address
        */
    export function addProtocol(url: string): string;
    /**
        * format URL address
        * note the scenes:
        * 1. micro-app -> attributeChangedCallback
        * 2. preFetch
        */
    export function formatAppURL(url: string | null, appName?: string | null): string;
    /**
        * format name
        * note the scenes:
        * 1. micro-app -> attributeChangedCallback
        * 2. event_center -> EventCenterForMicroApp -> constructor
        * 3. event_center -> EventCenterForBaseApp -> all methods
        * 4. preFetch
        * 5. plugins
        */
    export function formatAppName(name: string | null): string;
    /**
        * Get valid address, such as https://xxx/xx/xx.html to https://xxx/xx/
        * @param url app.url
        */
    export function getEffectivePath(url: string): string;
    /**
        * Complete address
        * @param path address
        * @param baseURI base url(app.url)
        */
    export function CompletionPath(path: string, baseURI: string): string;
    /**
        * Get the folder where the link resource is located,
        * which is used to complete the relative address in the css
        * @param linkpath full link address
        */
    export function getLinkFileDir(linkpath: string): string;
    /**
        * promise stream
        * @param promiseList promise list
        * @param successCb success callback
        * @param errorCb failed callback
        * @param finallyCb finally callback
        */
    export function promiseStream<T>(promiseList: Array<Promise<T> | T>, successCb: CallableFunction, errorCb: CallableFunction, finallyCb?: CallableFunction): void;
    export function isSupportModuleScript(): boolean;
    export function createNonceSrc(): string;
    export function unique(array: any[]): any[];
    export const requestIdleCallback: any;
    export function setCurrentAppName(appName: string | null): void;
    export function getCurrentAppName(): string | null;
    export function removeDomScope(): void;
    export function isSafari(): boolean;
    /**
        * Create pure elements
        */
    export function pureCreateElement<K extends keyof HTMLElementTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K];
    /**
        * clone origin elements to target
        * @param origin Cloned element
        * @param target Accept cloned elements
        * @param deep deep clone or transfer dom
        */
    export function cloneContainer<T extends Element, Q extends Element>(origin: T, target: Q, deep: boolean): void;
    export function isInvalidQuerySelectorKey(key: string): boolean;
    export function isUniqueElement(key: string): boolean;
    /**
        * get micro-app element
        * @param target app container
        */
    export function getRootContainer(target: HTMLElement | ShadowRoot): HTMLElement;
}

declare module '@micro-zoe/micro-app/interact' {
    import { CallableFunctionForInteract } from '@micro-app/types';
    class EventCenterForGlobal {
            /**
                * add listener of global data
                * @param cb listener
                * @param autoTrigger If there is cached data when first bind listener, whether it needs to trigger, default is false
                */
            addGlobalDataListener(cb: CallableFunctionForInteract, autoTrigger?: boolean): void;
            /**
                * remove listener of global data
                * @param cb listener
                */
            removeGlobalDataListener(cb: CallableFunctionForInteract): void;
            /**
                * dispatch global data
                * @param data data
                */
            setGlobalData(data: Record<PropertyKey, unknown>): void;
            /**
                * get global data
                */
            getGlobalData(): Record<PropertyKey, unknown> | null;
            /**
                * clear all listener of global data
                * if appName exists, only the specified functions is cleared
                * if appName not exists, only clear the base app functions
                */
            clearGlobalDataListener(): void;
    }
    export class EventCenterForBaseApp extends EventCenterForGlobal {
            /**
                * add listener
                * @param appName app.name
                * @param cb listener
                * @param autoTrigger If there is cached data when first bind listener, whether it needs to trigger, default is false
                */
            addDataListener(appName: string, cb: CallableFunction, autoTrigger?: boolean): void;
            /**
                * remove listener
                * @param appName app.name
                * @param cb listener
                */
            removeDataListener(appName: string, cb: CallableFunction): void;
            /**
                * get data from micro app or base app
                * @param appName app.name
                * @param fromBaseApp whether get data from base app, default is false
                */
            getData(appName: string, fromBaseApp?: boolean): Record<PropertyKey, unknown> | null;
            /**
                * Dispatch data to the specified micro app
                * @param appName app.name
                * @param data data
                */
            setData(appName: string, data: Record<PropertyKey, unknown>): void;
            /**
                * clear all listener for specified micro app
                * @param appName app.name
                */
            clearDataListener(appName: string): void;
    }
    export class EventCenterForMicroApp extends EventCenterForGlobal {
            appName: string;
            umdDataListeners?: {
                    global: Set<CallableFunctionForInteract>;
                    normal: Set<CallableFunctionForInteract>;
            };
            constructor(appName: string);
            /**
                * add listener, monitor the data sent by the base app
                * @param cb listener
                * @param autoTrigger If there is cached data when first bind listener, whether it needs to trigger, default is false
                */
            addDataListener(cb: CallableFunctionForInteract, autoTrigger?: boolean): void;
            /**
                * remove listener
                * @param cb listener
                */
            removeDataListener(cb: CallableFunctionForInteract): void;
            /**
                * get data from base app
                */
            getData(): Record<PropertyKey, unknown> | null;
            /**
                * dispatch data to base app
                * @param data data
                */
            dispatch(data: Record<PropertyKey, unknown>): void;
            /**
                * clear all listeners
                */
            clearDataListener(): void;
    }
    /**
        * Record UMD function before exec umdHookMount
        * @param microAppEventCneter
        */
    export function recordDataCenterSnapshot(microAppEventCneter: EventCenterForMicroApp): void;
    /**
        * Rebind the UMD function of the record before remount
        * @param microAppEventCneter instance of EventCenterForMicroApp
        */
    export function rebuildDataCenterSnapshot(microAppEventCneter: EventCenterForMicroApp): void;
    export {};
}

declare module '@micro-zoe/micro-app/create_app' {
    import type { AppInterface, sourceType, SandBoxInterface } from '@micro-app/types';
    export const appInstanceMap: Map<string, AppInterface>;
    export interface CreateAppParam {
            name: string;
            url: string;
            ssrUrl?: string;
            scopecss: boolean;
            useSandbox: boolean;
            macro?: boolean;
            inline?: boolean;
            baseroute?: string;
            container?: HTMLElement | ShadowRoot;
    }
    export default class CreateApp implements AppInterface {
            umdMode: boolean;
            isPrefetch: boolean;
            name: string;
            url: string;
            ssrUrl: string;
            container: HTMLElement | ShadowRoot | null;
            inline: boolean;
            scopecss: boolean;
            useSandbox: boolean;
            macro: boolean;
            baseroute: string;
            source: sourceType;
            sandBox: SandBoxInterface | null;
            constructor({ name, url, ssrUrl, container, inline, scopecss, useSandbox, macro, baseroute, }: CreateAppParam);
            loadSourceCode(): void;
            /**
                * When resource is loaded, mount app if it is not prefetch or unmount
                */
            onLoad(html: HTMLElement): void;
            /**
                * Error loading HTML
                * @param e Error
                */
            onLoadError(e: Error): void;
            /**
                * mount app
                * @param container app container
                * @param inline js runs in inline mode
                * @param baseroute route prefix, default is ''
                */
            mount(container?: HTMLElement | ShadowRoot, inline?: boolean, baseroute?: string): void;
            /**
                * unmount app
                * @param destroy completely destroy, delete cache resources
                * @param unmountcb callback of unmount
                */
            unmount(destroy: boolean, unmountcb?: CallableFunction): void;
            actionsForCompletelyDestory(): void;
            hiddenKeepAliveApp(): void;
            showKeepAliveApp(container: HTMLElement | ShadowRoot): void;
            /**
                * app rendering error
                * @param e Error
                */
            onerror(e: Error): void;
            getAppState(): string;
            getKeepAliveState(): string | null;
    }
    export function getActiveApps(): string[];
    export function getAllApps(): string[];
    export interface unmountAppParams {
            destroy?: boolean;
            clearAliveState?: boolean;
    }
    /**
        * unmount app by appname
        * @param appName
        * @param options unmountAppParams
        * @returns Promise<void>
        */
    export function unmountApp(appName: string, options?: unmountAppParams): Promise<void>;
    export function unmountAllApps(options?: unmountAppParams): Promise<void>;
}

